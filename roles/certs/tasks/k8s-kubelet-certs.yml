---

- name: Check ca and ca key file
  stat:
    path: "{{ item }}"
  with_items:
    - "{{ ca }}"
    - "{{ ca_key }}"
  register: check_ca_files

- name: Read ca and ca key file
  when: item.stat.exists
  slurp: src={{ item.item }}
  with_items: "{{ check_ca_files['results'] }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: read_ca_files

- name: Write ca and ca key content
  when: item[0].item == item[1].source and not item[0].stat.exists
  copy:
    mode: 0644
    content: "{{ item[1].content | b64decode  }}"
    dest: "{{ item[1].source }}"
  with_nested:
    - "{{ check_ca_files['results'] }}"
    - "{{ read_ca_files['results'] }}"

- name: Check kubelet SSL certificate key files
  stat:
    path: "{{ kubelet }}"
  register: check_kubelet_ssl_file

- name: Generate kubelet SSL certificate json files
  when: not check_kubelet_ssl_file.stat.exists
  template:
    src: kubelet-csr.json.j2
    dest: "{{ pki_dir }}/kubelet-csr.json"
  register: gen_kubelet_json_file

- name: Create kubelet SSL certificate key files
  when: not check_kubelet_ssl_file.stat.exists
  shell: |
    {{ bin_dir }}/cfssl gencert \
      -ca={{ pki_dir }}/ca.pem \
      -ca-key={{ pki_dir }}/ca-key.pem \
      -config={{ ca_config }} \
      -hostname="{{ ansible_hostname }}" \
      -profile={{ cert_info_profile }} \
      {{ pki_dir }}/kubelet-csr.json | \
      {{ bin_dir }}/cfssljson -bare {{ pki_dir }}/kubelet
  register: create_kubelet_ssl_file
